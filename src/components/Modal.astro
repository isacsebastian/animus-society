---
export interface Props {
  id: string;
  title: string;
  message: string;
  confirmText?: string;
  cancelText?: string;
  confirmAction?: string;
  isDangerous?: boolean;
}

const {
  id,
  title,
  message,
  confirmText = "Confirmar",
  cancelText = "Cancelar",
  confirmAction = "",
  isDangerous = false,
} = Astro.props;
---

<div
  id={id}
  class="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50 hidden"
>
  <div
    class="bg-white rounded-xl shadow-2xl border border-gray-200 w-full max-w-md mx-auto transform transition-all duration-200 scale-95 opacity-0"
    id={`${id}-content`}
  >
    <div class="p-6">
      <div class="flex items-center gap-3 mb-4">
        <div
          class={`w-10 h-10 rounded-full flex items-center justify-center ${
            isDangerous ? "bg-red-100" : "bg-[#6D4AEB]/10"
          }`}
        >
          {
            isDangerous ? (
              <svg
                class="w-6 h-6 text-red-600"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z"
                />
              </svg>
            ) : (
              <svg
                class="w-6 h-6 text-[#6D4AEB]"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                />
              </svg>
            )
          }
        </div>
        <div>
          <h3 class="text-lg font-semibold text-black">{title}</h3>
        </div>
      </div>

      <p class="text-gray-600 mb-6 leading-relaxed">
        {message}
      </p>

      <div class="flex flex-col sm:flex-row gap-3 sm:gap-3 sm:justify-end">
        <button
          id={`${id}-cancel`}
          class="px-6 py-3 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg font-medium transition-colors order-2 sm:order-1"
        >
          {cancelText}
        </button>
        <button
          id={`${id}-confirm`}
          class={`px-6 py-3 text-white rounded-lg font-medium transition-colors order-1 sm:order-2 ${
            isDangerous
              ? "bg-red-600 hover:bg-red-700"
              : "bg-[#6D4AEB] hover:bg-[#5A3CC7]"
          }`}
          data-action={confirmAction}
        >
          {confirmText}
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Función para mostrar modal
    function showModal(modalId: string) {
      const modal = document.getElementById(modalId);
      const content = document.getElementById(`${modalId}-content`);

      if (modal && content) {
        modal.classList.remove("hidden");
        // Pequeño delay para la animación
        setTimeout(() => {
          content.classList.remove("scale-95", "opacity-0");
          content.classList.add("scale-100", "opacity-100");
        }, 10);
      }
    }

    // Función para ocultar modal
    function hideModal(modalId: string) {
      const modal = document.getElementById(modalId);
      const content = document.getElementById(`${modalId}-content`);

      if (modal && content) {
        content.classList.remove("scale-100", "opacity-100");
        content.classList.add("scale-95", "opacity-0");

        setTimeout(() => {
          modal.classList.add("hidden");
        }, 200);
      }
    }

    // Configurar todos los modales en la página
    const modals = document.querySelectorAll('[id*="modal"]');

    modals.forEach((modal) => {
      const modalId = modal.id;
      const cancelBtn = document.getElementById(`${modalId}-cancel`);
      const confirmBtn = document.getElementById(`${modalId}-confirm`);

      // Cerrar modal al hacer clic en cancelar
      if (cancelBtn) {
        cancelBtn.addEventListener("click", () => {
          hideModal(modalId);
        });
      }

      // Cerrar modal al hacer clic en el fondo
      modal.addEventListener("click", (e) => {
        if (e.target === modal) {
          hideModal(modalId);
        }
      });

      // Manejar confirmación
      if (confirmBtn) {
        confirmBtn.addEventListener("click", () => {
          const action = confirmBtn.getAttribute("data-action");

          if (action === "logout") {
            // Lógica de logout
            localStorage.removeItem("admin_token");
            localStorage.removeItem("admin_user");
            localStorage.removeItem("admin_login_time");
            window.location.href = "/admin";
          }

          hideModal(modalId);
        });
      }

      // Cerrar modal con tecla Escape
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && !modal.classList.contains("hidden")) {
          hideModal(modalId);
        }
      });
    });

    // Exponer funciones globalmente para uso externo
    (window as any).showModal = showModal;
    (window as any).hideModal = hideModal;
  });
</script>
