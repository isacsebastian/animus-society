---

---

<div
  id="notification-container"
  class="fixed top-4 left-0 right-0 flex flex-col items-center pointer-events-none"
  style="z-index: 99999;"
>
</div>

<script is:inline>
  class Notification {
    static show(message, type = "info") {
      const container = document.getElementById("notification-container");
      if (!container) return;

      const notification = document.createElement("div");

      let borderColor = "";
      let icon = "";

      switch (type) {
        case "success":
          borderColor = "border-green-500";
          icon = `<svg class="w-5 h-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
          </svg>`;
          break;
        case "error":
          borderColor = "border-red-500";
          icon = `<svg class="w-5 h-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>`;
          break;
        case "warning":
          borderColor = "border-yellow-500";
          icon = `<svg class="w-5 h-5 text-yellow-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
          </svg>`;
          break;
        default:
          borderColor = "border-blue-500";
          icon = `<svg class="w-5 h-5 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>`;
      }

      notification.className = `bg-white text-gray-900 shadow-lg border-t-4 rounded-lg px-6 py-4 my-2 max-w-md transform translate-y-0 transition-all duration-300 pointer-events-auto relative ${borderColor}`;
      notification.innerHTML = `
        <div class="flex items-center gap-3">
          ${icon}
          <p class="text-sm font-medium flex-grow leading-5">${message}</p>
          <button onclick="this.parentElement.parentElement.remove()" class="text-gray-400 hover:text-gray-600 transition-colors ml-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      `;

      // Limitar el número de notificaciones visibles
      const maxNotifications = 3;
      const existingNotifications = container.children;
      if (existingNotifications.length >= maxNotifications) {
        container.removeChild(existingNotifications[0]);
      }

      container.appendChild(notification);

      // Establecer estado inicial
      notification.style.opacity = "0";
      notification.style.transform = "translateY(-20px)";

      // Animación de entrada
      requestAnimationFrame(() => {
        notification.style.opacity = "1";
        notification.style.transform = "translateY(0)";
      });

      // Progreso de la barra de tiempo
      const progress = document.createElement("div");
      progress.className = `absolute bottom-0 left-0 right-0 h-1 bg-current opacity-20 transition-all duration-[5000ms] rounded-b-lg`;
      progress.style.width = "100%";
      notification.appendChild(progress);

      // Iniciar la animación de la barra de progreso
      requestAnimationFrame(() => {
        progress.style.width = "0%";
      });

      // Auto-remover después de 5 segundos
      const timeout = setTimeout(() => {
        notification.style.transform = "translateY(-100%)";
        notification.style.opacity = "0";
        setTimeout(() => notification.remove(), 300);
      }, 5000);

      // Pausar el temporizador al pasar el mouse
      notification.addEventListener("mouseenter", () => {
        clearTimeout(timeout);
        progress.style.width = progress.offsetWidth + "px";
        progress.style.transition = "none";
      });

      // Reanudar al quitar el mouse
      notification.addEventListener("mouseleave", () => {
        const remainingTime = (parseFloat(progress.style.width) / 100) * 5000;
        progress.style.transition = `width ${remainingTime}ms linear`;
        progress.style.width = "0%";

        setTimeout(() => {
          notification.style.transform = "translateY(-100%)";
          notification.style.opacity = "0";
          setTimeout(() => notification.remove(), 300);
        }, remainingTime);
      });
    }
  }

  // Exponer la función globalmente
  window.showNotification = Notification.show;
</script>
