---
import Layout from "../../layouts/Layout.astro";
import CartIcon from "../../components/svg/CartIcon.astro";
import Notification from "../../components/Notification.astro";

const BACKEND = import.meta.env.PUBLIC_BACKEND_URL || "http://localhost:3000";
const OPPWA = import.meta.env.PUBLIC_OPPWA_URL || "https://eu-prod.oppwa.com";

const genId = () => {
  return `ORD_${Date.now().toString(36)}_${Math.random()
    .toString(36)
    .slice(2, 10)}`.toUpperCase();
};
---

<Layout
  title="Pago - Animus Society"
  description="Completa tu compra en Animus Society de forma segura y rápida"
>
  <Notification />
  <style is:global id="wpwl-custom">
    #widget-mount .wpwl-container {
      font-family: inherit !important;
      font-size: 0.875rem !important;
      line-height: 1.5 !important;
      font-weight: 400 !important;
    }

    #widget-mount .wpwl-container.wpwl-container-card {
      border: 1px solid #e5e7eb !important;
      background: #fff !important;
    }
    #widget-mount .wpwl-label {
      font-family: inherit !important;
      font-size: 0.875rem !important;
      font-weight: 400 !important;
      color: #374151 !important;
      margin-bottom: 6px !important;
    }
    #widget-mount .wpwl-control-expiry,
    #widget-mount .wpwl-control-cardHolder,
    #widget-mount .wpwl-control-brand {
      font-family: inherit !important;
      font-size: 0.875rem !important;
      color: #111827 !important;
      border: 1px solid #d1d5db !important;
      border-radius: 10px !important;
      padding: 10px 12px !important;
      background: #fff !important;
      outline: none !important;
      height: 42px !important;
    }

    #widget-mount .wpwl-wrapper-cardNumber,
    #widget-mount .wpwl-wrapper-cvv {
      background: #fff !important;
      border-radius: 10px !important;
      overflow: hidden !important;
      position: relative !important;
      isolation: isolate !important;
    }

    #widget-mount iframe[name="card.number"],
    #widget-mount iframe[name="card.cvv"] {
      display: block !important;
      width: 100% !important;
      height: 42px !important;
      border-radius: 10px !important;
      border: 1px solid #d1d5db !important;
      background: #fff !important;
      box-sizing: border-box !important;
      color: #111827 !important;
      font-family: inherit !important;
      font-size: 0.875rem !important;
      font-weight: 400 !important;
      filter: contrast(1.55) brightness(0.92) saturate(1.12) !important;
      mix-blend-mode: multiply !important;
      backface-visibility: hidden !important;
      transform: translateZ(0) !important;
      isolation: isolate !important;
    }
    #widget-mount
      .wpwl-wrapper-cardNumber:focus-within
      iframe[name="card.number"],
    #widget-mount .wpwl-wrapper-cvv:focus-within iframe[name="card.cvv"] {
      filter: contrast(1.8) brightness(0.9) saturate(1.15) !important;
      mix-blend-mode: multiply !important;
    }
  </style>

  <style>
    html,
    body {
      overflow: auto !important;
      height: auto !important;
    }

    .plan-option input:checked + div {
      border-color: #111827 !important;
      background-color: #f9fafb !important;
    }

    .plan-tab.active {
      background-color: white !important;
      color: #111827 !important;
      box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05) !important;
    }

    .plan-option {
      transition: all 0.2s ease-in-out;
    }

    .plan-option:hover div {
      border-color: #6b7280 !important;
    }
  </style>

  <div class="min-h-screen bg-gray-50 py-8 px-4 sm:px-6 lg:px-8">
    <div class="max-w-4xl mx-auto mb-4">
      <a
        href="/"
        class="inline-flex items-center justify-center w-10 h-10 text-gray-600 hover:text-gray-900 hover:bg-white rounded-full transition-all duration-200 shadow-sm border border-gray-200"
      >
        <svg
          class="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
        </svg>
      </a>
    </div>

    <div class="max-w-4xl mx-auto">
      <div class="text-center mb-8">
        <div
          class="inline-flex items-center justify-center w-16 h-16 bg-gray-900 rounded-full mb-4"
        >
          <CartIcon className="w-8 h-8 text-white" />
        </div>
        <h1 class="text-3xl font-bold text-gray-900 mb-2">Finalizar Compra</h1>
        <p class="text-gray-600">
          Completa tu información para procesar el pago
        </p>
      </div>

      <div class="grid lg:grid-cols-2 gap-8">
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <h2 class="text-xl font-semibold text-gray-900 mb-6">
            Información de Pago
          </h2>

          <form id="pay-form" class="space-y-6" onsubmit="return false;">
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <label
                  for="givenName"
                  class="block text-sm font-medium text-gray-700 mb-2"
                >
                  Primer nombre <span class="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  id="givenName"
                  name="givenName"
                  required
                  pattern="[A-Za-zÁáÉéÍíÓóÚúÑñ\s]+"
                  title="Solo letras y espacios permitidos"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-gray-900 focus:border-gray-900 transition-colors text-gray-900"
                  placeholder="Juan"
                />
              </div>
              <div>
                <label
                  for="middleName"
                  class="block text-sm font-medium text-gray-700 mb-2"
                >
                  Segundo nombre <span class="text-gray-500"></span>
                </label>
                <input
                  type="text"
                  id="middleName"
                  name="middleName"
                  pattern="[A-Za-zÁáÉéÍíÓóÚúÑñ\s]*"
                  minlength="2"
                  title="Solo letras y espacios permitidos. Mínimo 2 caracteres si se llena"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-gray-900 focus:border-gray-900 transition-colors text-gray-900"
                  placeholder="Pablo"
                />
              </div>
            </div>

            <div>
              <label
                for="surname"
                class="block text-sm font-medium text-gray-700 mb-2"
              >
                Apellidos <span class="text-red-500">*</span>
              </label>
              <input
                type="text"
                id="surname"
                name="surname"
                required
                pattern="[A-Za-zÁáÉéÍíÓóÚúÑñ\s]+"
                title="Solo letras y espacios permitidos"
                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-gray-900 focus:border-gray-900 transition-colors text-gray-900"
                placeholder="Pérez González"
              />
            </div>

            <div>
              <label
                for="email"
                class="block text-sm font-medium text-gray-700 mb-2"
              >
                Email <span class="text-red-500">*</span>
              </label>
              <input
                type="email"
                id="email"
                name="email"
                required
                pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$"
                title="Ingrese un email válido"
                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-gray-900 focus:border-gray-900 transition-colors text-gray-900"
                placeholder="juan.perez@email.com"
              />
            </div>

            <!-- Campo oculto - se llena automáticamente con identificationDocId -->
            <div style="display: none;">
              <input
                type="text"
                id="merchantCustomerId"
                name="merchantCustomerId"
                required
                minlength="10"
                maxlength="16"
                pattern="[0-9A-Za-z]+"
              />
            </div>

            <!-- Nuevos campos obligatorios DataFast Fase 2 -->
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <label
                  for="identificationDocType"
                  class="block text-sm font-medium text-gray-700 mb-2"
                >
                  Tipo de Documento <span class="text-red-500">*</span>
                </label>
                <select
                  id="identificationDocType"
                  name="identificationDocType"
                  required
                  class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-gray-900 focus:border-gray-900 transition-colors text-gray-900"
                >
                  <option value="">Seleccione...</option>
                  <option value="IDCARD">Cédula</option>
                  <option value="PASSPORT">Pasaporte</option>
                  <option value="TAXCARD">RUC</option>
                </select>
              </div>
              <div>
                <label
                  for="identificationDocId"
                  class="block text-sm font-medium text-gray-700 mb-2"
                >
                  Número de Documento <span class="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  id="identificationDocId"
                  name="identificationDocId"
                  required
                  minlength="10"
                  maxlength="16"
                  pattern="[0-9A-Za-z]+"
                  title="Número de cédula, pasaporte o RUC"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-gray-900 focus:border-gray-900 transition-colors text-gray-900"
                  placeholder="1234567890"
                />
              </div>
            </div>

            <div>
              <label
                for="phone"
                class="block text-sm font-medium text-gray-700 mb-2"
              >
                Teléfono/Celular <span class="text-red-500">*</span>
              </label>
              <input
                type="tel"
                id="phone"
                name="phone"
                required
                pattern="[+]?[0-9]{10,15}"
                title="Ingrese un número de teléfono válido (10-15 dígitos, puede incluir + al inicio)"
                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-gray-900 focus:border-gray-900 transition-colors text-gray-900"
                placeholder="+593987654321"
              />
            </div>

            <div>
              <label
                for="street1"
                class="block text-sm font-medium text-gray-700 mb-2"
              >
                Dirección <span class="text-red-500">*</span>
              </label>
              <input
                type="text"
                id="street1"
                name="street1"
                required
                minlength="5"
                maxlength="100"
                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-gray-900 focus:border-gray-900 transition-colors text-gray-900"
                placeholder="Av. Amazonas N123"
              />
            </div>

            <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
              <div>
                <label
                  for="city"
                  class="block text-sm font-medium text-gray-700 mb-2"
                >
                  Ciudad <span class="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  id="city"
                  name="city"
                  required
                  minlength="3"
                  maxlength="50"
                  pattern="[A-Za-zÁáÉéÍíÓóÚúÑñ\s]+"
                  title="Solo letras y espacios"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-gray-900 focus:border-gray-900 transition-colors text-gray-900"
                  placeholder="Quito"
                />
              </div>
              <div>
                <label
                  for="state"
                  class="block text-sm font-medium text-gray-700 mb-2"
                >
                  Provincia <span class="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  id="state"
                  name="state"
                  required
                  minlength="3"
                  maxlength="50"
                  pattern="[A-Za-zÁáÉéÍíÓóÚúÑñ\s]+"
                  title="Solo letras y espacios"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-gray-900 focus:border-gray-900 transition-colors text-gray-900"
                  placeholder="Pichincha"
                />
              </div>
              <div>
                <label
                  for="country"
                  class="block text-sm font-medium text-gray-700 mb-2"
                >
                  País <span class="text-red-500">*</span>
                </label>
                <select
                  id="country"
                  name="country"
                  required
                  class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-gray-900 focus:border-gray-900 transition-colors text-gray-900"
                >
                  <option value="EC">Ecuador</option>
                  <option value="US">Estados Unidos</option>
                  <option value="CO">Colombia</option>
                  <option value="PE">Perú</option>
                  <option value="MX">México</option>
                </select>
              </div>
            </div>

            <div>
              <label
                for="postcode"
                class="block text-sm font-medium text-gray-700 mb-2"
              >
                Código Postal <span class="text-red-500">*</span>
              </label>
              <input
                type="text"
                id="postcode"
                name="postcode"
                required
                minlength="4"
                maxlength="10"
                pattern="[0-9A-Za-z\-]+"
                title="Código postal válido"
                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-gray-900 focus:border-gray-900 transition-colors text-gray-900"
                placeholder="170515"
              />
            </div>

            <div class="border-t border-gray-200 pt-6">
              <h3 class="text-lg font-medium text-gray-900 mb-4">
                Selecciona tu Plan
              </h3>
              <div class="mb-6">
                <div class="flex bg-gray-100 rounded-lg p-1">
                  <button
                    id="tab-gym"
                    type="button"
                    class="plan-tab flex-1 px-4 py-2 text-sm font-medium rounded-md transition-colors bg-white text-gray-900 shadow-sm active"
                  >
                    Gimnasio
                  </button>
                  <button
                    id="tab-app"
                    type="button"
                    class="plan-tab flex-1 px-4 py-2 text-sm font-medium rounded-md transition-colors text-gray-600 hover:text-gray-900"
                  >
                    App
                  </button>
                  <button
                    id="tab-test"
                    type="button"
                    class="plan-tab flex-1 px-4 py-2 text-sm font-medium rounded-md transition-colors text-gray-600 hover:text-gray-900"
                  >
                    Pruebas
                  </button>
                </div>
              </div>

              <div id="plans-gym" class="plan-section">
                <div class="grid gap-4">
                  <label class="plan-option cursor-pointer">
                    <input
                      type="radio"
                      name="selectedPlan"
                      value="gym-monthly"
                      data-price="77.00"
                      data-name="Animus Flow - Plan Mensual"
                      data-description="Plan mensual gimnasio"
                      class="sr-only"
                    />
                    <div
                      class="flex items-center justify-between p-4 border-2 border-gray-200 rounded-lg hover:border-gray-900 transition-colors"
                    >
                      <div class="flex-1">
                        <h4 class="font-medium text-gray-900">Animus Flow</h4>
                        <p class="text-sm text-gray-600">
                          Empieza tu transformación hoy mismo y mantén el ritmo cada día
                        </p>
                      </div>
                      <div class="text-right">
                        <span class="text-2xl font-bold text-gray-900">$77</span
                        >
                        <p class="text-sm text-gray-600">/mes</p>
                      </div>
                    </div>
                  </label>

                  <label class="plan-option cursor-pointer">
                    <input
                      type="radio"
                      name="selectedPlan"
                      value="gym-yearly"
                      data-price="799.00"
                      data-name="Animus Legacy - Plan Anual"
                      data-description="Plan anual gimnasio"
                      class="sr-only"
                    />
                    <div
                      class="flex items-center justify-between p-4 border-2 border-gray-200 rounded-lg hover:border-gray-900 transition-colors relative"
                    >
                      <span
                        class="absolute -top-2 right-4 bg-yellow-500 text-gray-900 text-xs font-bold px-2 py-1 rounded-full"
                      >
                        Más popular
                      </span>
                      <div class="flex-1">
                        <h4 class="font-medium text-gray-900">Animus Legacy</h4>
                        <p class="text-sm text-gray-600">Ahorra $125 y eleva tu rendimiento durante todo el año</p>
                      </div>
                      <div class="text-right">
                        <span class="text-2xl font-bold text-gray-900"
                          >$799</span
                        >
                        <p class="text-sm text-gray-600">/año</p>
                      </div>
                    </div>
                  </label>
                </div>
              </div>

              <div id="plans-app" class="plan-section hidden">
                <div class="grid gap-4">
                  <label class="plan-option cursor-pointer">
                    <input
                      type="radio"
                      name="selectedPlan"
                      value="app-monthly"
                      data-price="19.99"
                      data-name="Animus Flow Online - Plan Mensual"
                      data-description="Plan mensual online"
                      class="sr-only"
                    />
                    <div
                      class="flex items-center justify-between p-4 border-2 border-gray-200 rounded-lg hover:border-gray-900 transition-colors"
                    >
                      <div class="flex-1">
                        <h4 class="font-medium text-gray-900">
                          Animus Flow Online
                        </h4>
                        <p class="text-sm text-gray-600">
                          Empieza tu transformación hoy mismo y mantén el ritmo cada día
                        </p>
                      </div>
                      <div class="text-right">
                        <span class="text-2xl font-bold text-gray-900"
                          >$19<span class="text-lg">.99</span></span
                        >
                        <p class="text-sm text-gray-600">/mes</p>
                      </div>
                    </div>
                  </label>

                  <label class="plan-option cursor-pointer">
                    <input
                      type="radio"
                      name="selectedPlan"
                      value="app-yearly"
                      data-price="199.00"
                      data-name="Animus Legacy Online - Plan Anual"
                      data-description="Plan anual online"
                      class="sr-only"
                    />
                    <div
                      class="flex items-center justify-between p-4 border-2 border-gray-200 rounded-lg hover:border-gray-900 transition-colors relative"
                    >
                      <span
                        class="absolute -top-2 right-4 bg-yellow-500 text-gray-900 text-xs font-bold px-2 py-1 rounded-full"
                      >
                        Más popular
                      </span>
                      <div class="flex-1">
                        <h4 class="font-medium text-gray-900">
                          Animus Legacy Online
                        </h4>
                        <p class="text-sm text-gray-600">Ahorra $40 y eleva tu rendimiento durante todo el año</p>
                      </div>
                      <div class="text-right">
                        <span class="text-2xl font-bold text-gray-900"
                          >$199</span
                        >
                        <p class="text-sm text-gray-600">/año</p>
                      </div>
                    </div>
                  </label>
                </div>
              </div>

              <div id="plans-test" class="plan-section hidden">
                <div class="grid gap-4">
                  <label class="plan-option cursor-pointer">
                    <input
                      type="radio"
                      name="selectedPlan"
                      value="test-monthly"
                      data-price="1.00"
                      data-name="Prueba Suscripción Mensual"
                      data-description="Prueba de pago recurrente automático"
                      class="sr-only"
                    />
                    <div
                      class="flex items-center justify-between p-4 border-2 border-gray-200 rounded-lg hover:border-gray-900 transition-colors"
                    >
                      <div class="flex-1">
                        <h4 class="font-medium text-gray-900">
                          Prueba Suscripción
                        </h4>
                        <p class="text-sm text-gray-600">
                          Test de pago recurrente automático
                        </p>
                      </div>
                      <div class="text-right">
                        <span class="text-2xl font-bold text-gray-900">$1</span>
                        <p class="text-sm text-gray-600">/mes</p>
                      </div>
                    </div>
                  </label>

                  <label class="plan-option cursor-pointer">
                    <input
                      type="radio"
                      name="selectedPlan"
                      value="test-yearly"
                      data-price="1.00"
                      data-name="Prueba Pago Único"
                      data-description="Prueba de pago único tradicional"
                      class="sr-only"
                    />
                    <div
                      class="flex items-center justify-between p-4 border-2 border-gray-200 rounded-lg hover:border-gray-900 transition-colors"
                    >
                      <div class="flex-1">
                        <h4 class="font-medium text-gray-900">
                          Prueba Pago Único
                        </h4>
                        <p class="text-sm text-gray-600">
                          Test de pago único tradicional
                        </p>
                      </div>
                      <div class="text-right">
                        <span class="text-2xl font-bold text-gray-900">$1</span>
                        <p class="text-sm text-gray-600">/único</p>
                      </div>
                    </div>
                  </label>
                </div>
              </div>

              <div class="space-y-4 mt-6">
                <input type="hidden" id="amount" name="amount" value="77.00" />

                <!-- Campo oculto pero funcional: ID de Transacción -->
                <input
                  type="hidden"
                  id="merchantTransactionId"
                  name="merchantTransactionId"
                  required
                  readonly
                  value={genId()}
                />

                <!-- Campos ocultos pero funcionales: Impuestos -->
                <input
                  type="hidden"
                  id="base0"
                  name="base0"
                  required
                  readonly
                  value="0.00"
                />
                <input
                  type="hidden"
                  id="baseImp"
                  name="baseImp"
                  required
                  readonly
                  value="66.96"
                />
                <input
                  type="hidden"
                  id="iva"
                  name="iva"
                  required
                  readonly
                  value="10.04"
                />
              </div>
            </div>
          </form>
        </div>

        <!-- Resumen del Pedido -->
        <div
          class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 h-fit"
        >
          <h2 class="text-xl font-semibold text-gray-900 mb-6">
            Estado de la Transacción
          </h2>

          <div class="space-y-4">
            <!-- Producto -->
            <div
              class="flex justify-between items-center py-3 border-b border-gray-200"
            >
              <div>
                <h3 id="summary-plan-name" class="font-medium text-gray-900">
                  Animus Flow - Plan Mensual
                </h3>
                <p id="summary-plan-description" class="text-sm text-gray-600">
                  Plan mensual gimnasio
                </p>
              </div>
              <span id="summary-plan-price" class="font-semibold text-gray-900"
                >$77.00</span
              >
            </div>

            <!-- Subtotal -->
            <div class="flex justify-between items-center text-sm">
              <span class="text-gray-600">Subtotal</span>
              <span id="summary-subtotal" class="text-gray-900">$77.00</span>
            </div>

            <!-- Impuestos -->
            <div class="flex justify-between items-center text-sm">
              <span class="text-gray-600">Impuestos (15%)</span>
              <span id="summary-tax" class="text-gray-900">$10.04</span>
            </div>

            <!-- Total -->
            <div class="border-t border-gray-200 pt-4">
              <div class="flex justify-between items-center">
                <span class="text-lg font-semibold text-gray-900">Total</span>
                <span
                  id="summary-total"
                  class="text-2xl font-bold text-gray-900">$86.24</span
                >
              </div>
            </div>

            <button
              id="btn-create"
              type="button"
              class="w-full bg-gray-900 text-white py-3 px-4 rounded-md font-medium hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-900 transition-colors mt-6"
            >
              Ir a pagar
            </button>

            <div class="text-center text-sm text-gray-500 mt-2">
              Se cargará el widget oficial del gateway
            </div>

            <div class="border-t border-gray-200 pt-6 mt-6">
              <div class="text-sm text-gray-600 mb-4">
                Marcas habilitadas:
                <span
                  class="inline-block bg-gray-100 text-gray-800 px-2 py-1 rounded text-xs mx-1"
                  >VISA</span
                >
                <span
                  class="inline-block bg-gray-100 text-gray-800 px-2 py-1 rounded text-xs mx-1"
                  >MASTER</span
                >
                <span
                  class="inline-block bg-gray-100 text-gray-800 px-2 py-1 rounded text-xs mx-1"
                  >AMEX</span
                >
                <span
                  class="inline-block bg-gray-100 text-gray-800 px-2 py-1 rounded text-xs mx-1"
                  >DINERS</span
                >
                <span
                  class="inline-block bg-gray-100 text-gray-800 px-2 py-1 rounded text-xs mx-1"
                  >DISCOVER</span
                >
              </div>
              <div
                id="widget-mount"
                class="min-h-[200px] border border-gray-200 rounded-md"
              >
              </div>
            </div>

            <div class="mt-4 p-3 bg-gray-50 rounded-md">
              <div class="flex items-center">
                <svg
                  class="w-5 h-5 text-green-500 mr-2"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path
                    fill-rule="evenodd"
                    d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z"
                    clip-rule="evenodd"></path>
                </svg>
                <span class="text-sm text-gray-600"
                  >Pago 100% seguro y encriptado</span
                >
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script define:vars={{ BACKEND, OPPWA }}>
  const logEl = document.getElementById("log");
  const log = (m, cls = "") => {
    console.log("Log:", m);
    if (!logEl) return;
    const div = document.createElement("div");
    div.className = cls;
    div.textContent = typeof m === "string" ? m : JSON.stringify(m, null, 2);
    logEl.appendChild(div);
    logEl.scrollTop = logEl.scrollHeight;
  };

  log("Página de pago iniciada");
  log(`Backend configurado: ${BACKEND}`);
  log(`OPPWA configurado: ${OPPWA}`);

  function calculateTax(basePrice) {
    const base = parseFloat(basePrice);
    const taxRate = 0.15;
    const baseImp = base / (1 + taxRate);
    const tax = base - baseImp;

    return { baseImp, tax, total: base };
  }

  function updatePricing(price, planName, planDescription) {
    const calculation = calculateTax(price);
    document.getElementById("amount").value = price.toFixed(2);
    document.getElementById("base0").value = "0.00";
    document.getElementById("baseImp").value = calculation.baseImp.toFixed(2);
    document.getElementById("iva").value = calculation.tax.toFixed(2);

    document.getElementById("summary-plan-name").textContent = planName;
    document.getElementById("summary-plan-description").textContent =
      planDescription;
    document.getElementById("summary-plan-price").textContent =
      `$${price.toFixed(2)}`;
    document.getElementById("summary-subtotal").textContent =
      `$${calculation.baseImp.toFixed(2)}`;
    document.getElementById("summary-tax").textContent =
      `$${calculation.tax.toFixed(2)}`;
    document.getElementById("summary-total").textContent =
      `$${calculation.total.toFixed(2)}`;
  }

  // Inicialización del DOM
  document.addEventListener("DOMContentLoaded", function () {
    // Tabs de categorías
    const planTabs = document.querySelectorAll(".plan-tab");
    const planSections = document.querySelectorAll(".plan-section");

    planTabs.forEach((tab) => {
      tab.addEventListener("click", function () {
        const targetSection = this.id.replace("tab-", "plans-");

        planTabs.forEach((t) => {
          t.classList.remove(
            "active",
            "bg-white",
            "text-gray-900",
            "shadow-sm"
          );
          t.classList.add("text-gray-600", "hover:text-gray-900");
        });

        this.classList.add("active", "bg-white", "text-gray-900", "shadow-sm");
        this.classList.remove("text-gray-600", "hover:text-gray-900");

        planSections.forEach((section) => section.classList.add("hidden"));
        document.getElementById(targetSection).classList.remove("hidden");

        const firstPlan = document.querySelector(
          `#${targetSection} input[name="selectedPlan"]`
        );
        if (firstPlan) {
          firstPlan.checked = true;
          selectPlan(firstPlan);
        }
      });
    });

    // Selección de planes
    const planOptions = document.querySelectorAll('input[name="selectedPlan"]');

    function selectPlan(planInput) {
      const price = parseFloat(planInput.getAttribute("data-price"));
      const planName = planInput.getAttribute("data-name");
      const planDescription = planInput.getAttribute("data-description");

      document.querySelectorAll(".plan-option > div").forEach((div) => {
        div.classList.remove("border-gray-900", "bg-gray-50");
        div.classList.add("border-gray-200");
      });

      const selectedDiv = planInput.parentElement.querySelector("div");
      selectedDiv.classList.add("border-gray-900", "bg-gray-50");
      selectedDiv.classList.remove("border-gray-200");

      updatePricing(price, planName, planDescription);
    }

    planOptions.forEach((option) => {
      option.addEventListener("change", function () {
        if (this.checked) selectPlan(this);
      });
    });

    const defaultPlan = document.querySelector('input[name="selectedPlan"]');
    if (defaultPlan) {
      defaultPlan.checked = true;
      selectPlan(defaultPlan);
    }

    // Copiar automáticamente identificationDocId a merchantCustomerId
    const identificationDocIdInput = document.getElementById(
      "identificationDocId"
    );
    const merchantCustomerIdInput =
      document.getElementById("merchantCustomerId");

    if (identificationDocIdInput && merchantCustomerIdInput) {
      identificationDocIdInput.addEventListener("input", function () {
        merchantCustomerIdInput.value = this.value;
      });

      // Copiar valor inicial si existe
      if (identificationDocIdInput.value) {
        merchantCustomerIdInput.value = identificationDocIdInput.value;
      }
    }
  });

  // Función de validación de campos
  function validateForm() {
    const form = document.getElementById("pay-form");
    if (!form) {
      showNotification("Error al procesar el formulario", "error");
      return false;
    }

    const givenName = form.querySelector("#givenName");
    const middleName = form.querySelector("#middleName");
    const surname = form.querySelector("#surname");
    const email = form.querySelector("#email");
    const merchantCustomerId = form.querySelector("#merchantCustomerId");
    const identificationDocType = form.querySelector("#identificationDocType");
    const identificationDocId = form.querySelector("#identificationDocId");
    const phone = form.querySelector("#phone");
    const street1 = form.querySelector("#street1");
    const city = form.querySelector("#city");
    const state = form.querySelector("#state");
    const country = form.querySelector("#country");
    const postcode = form.querySelector("#postcode");
    const selectedPlan = form.querySelector(
      'input[name="selectedPlan"]:checked'
    );

    const requiredFields = [
      { field: givenName, name: "Primer nombre" },
      { field: surname, name: "Apellidos" },
      { field: email, name: "Email" },
      { field: merchantCustomerId, name: "Número de Identificación" },
      { field: identificationDocType, name: "Tipo de Documento" },
      { field: identificationDocId, name: "Número de Documento" },
      { field: phone, name: "Teléfono" },
      { field: street1, name: "Dirección" },
      { field: city, name: "Ciudad" },
      { field: state, name: "Provincia" },
      { field: country, name: "País" },
      { field: postcode, name: "Código Postal" },
    ];

    for (const { field, name } of requiredFields) {
      if (!field.value.trim()) {
        showNotification(`El campo ${name} es requerido`, "warning");
        field.focus();
        return false;
      }
    }

    if (!selectedPlan) {
      showNotification("Por favor selecciona un plan", "warning");
      return false;
    }

    const nameRegex = /^[A-Za-zÁáÉéÍíÓóÚúÑñ\s]+$/;
    const emailRegex = /^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$/;
    const idRegex = /^[0-9A-Za-z]+$/;

    if (!nameRegex.test(givenName.value)) {
      showNotification(
        "El nombre solo debe contener letras y espacios",
        "warning"
      );
      givenName.focus();
      return false;
    }

    if (middleName.value && !nameRegex.test(middleName.value)) {
      showNotification(
        "El segundo nombre solo debe contener letras y espacios",
        "warning"
      );
      middleName.focus();
      return false;
    }

    if (!nameRegex.test(surname.value)) {
      showNotification(
        "Los apellidos solo deben contener letras y espacios",
        "warning"
      );
      surname.focus();
      return false;
    }

    if (!emailRegex.test(email.value)) {
      showNotification("Por favor ingrese un email válido", "warning");
      email.focus();
      return false;
    }

    if (!idRegex.test(merchantCustomerId.value)) {
      showNotification(
        "El número de identificación solo debe contener números y letras",
        "warning"
      );
      merchantCustomerId.focus();
      return false;
    }

    if (merchantCustomerId.value.length < 10) {
      showNotification(
        "El número de identificación debe tener al menos 10 caracteres",
        "warning"
      );
      merchantCustomerId.focus();
      return false;
    }

    return true;
  }

  async function createCheckout(payload) {
    const res = await fetch("/api/payments/checkouts", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });
    if (!res.ok) throw new Error(await res.text());
    return await res.json();
  }

  async function createSubscriptionCheckout(payload) {
    const res = await fetch("/api/payments/subscriptions/checkout", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });
    if (!res.ok) throw new Error(await res.text());
    return await res.json();
  }

  async function completeSubscription(resourcePath, customerId, planType) {
    const res = await fetch("/api/payments/subscriptions/complete", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ resourcePath, customerId, planType }),
    });
    if (!res.ok) throw new Error(await res.text());
    return await res.json();
  }

  function loadWidget(
    checkoutId,
    isSubscription = false,
    subscriptionData = null
  ) {
    const mount = document.getElementById("widget-mount");
    if (!mount) return;

    // Asegurar que el callbackUrl sea una URL absoluta completa
    const getAbsoluteUrl = (path) => {
      // Si ya es una URL absoluta, devolverla tal cual
      if (path.startsWith("http://") || path.startsWith("https://")) {
        return path;
      }
      // Si BACKEND es relativo, construir URL absoluta con el origen actual
      if (BACKEND.startsWith("/") || !BACKEND.startsWith("http")) {
        return `${window.location.origin}${path}`;
      }
      // Concatenar BACKEND con el path
      return `${BACKEND}${path}`;
    };

    const callbackPath =
      isSubscription && subscriptionData
        ? `/api/payments/json-response?type=subscription&customerId=${subscriptionData.customerId}&planType=${subscriptionData.planType}`
        : `/api/payments/json-response?type=onetime`;

    const callbackUrl = getAbsoluteUrl(callbackPath);

    log(`Callback URL: ${callbackUrl}`, "ok");
    log("El backend procesará y redirigirá a /payment-processing", "ok");

    mount.innerHTML = "";

    const prevScript = document.getElementById("oppwa-script");
    if (prevScript) prevScript.remove();
    
    // ✅ FLUJO CORRECTO:
    // 1. Widget intercepta con onBeforeRedirect
    // 2. Llama backend en segundo plano para guardar pago
    // 3. Redirige INMEDIATAMENTE a /payment-processing
    // 4. Usuario ve página bonita sin errores 502
    mount.innerHTML = `
      <form class="paymentWidgets"
            data-brands="VISA MASTER AMEX DINERS DISCOVER">
      </form>`;

    log("Widget configurado - redirigirá a /payment-processing", "ok");

    // ✅ SOLUCIÓN FINAL: NO esperar respuesta del backend, redirigir directo
    window.wpwlOptions = {
      style: "card",
      locale: "es",
      labels: {
        cvv: "Código de verificación",
        cardHolder: "Nombre (Igual que en la tarjeta)",
        registerCard: "Guardar información de tarjeta para pagos futuros",
      },
      onBeforeRedirect: function(data) {
        // El widget quiere redirigir, interceptamos
        log("Pago completado - redirigiendo a /payment-processing...", "ok");
        
        // Construir la URL del backend para llamarlo en segundo plano
        const backendUrl = new URL(callbackUrl);
        if (data && data.id) {
          backendUrl.searchParams.set('id', data.id);
          backendUrl.searchParams.set('resourcePath', `/v1/checkouts/${data.id}/payment`);
        }
        
        // Llamar al backend en segundo plano (sin esperar respuesta)
        fetch(backendUrl.toString(), {
          method: 'GET',
          mode: 'no-cors' // No nos importa la respuesta
        }).catch(err => {
          console.log('Error en background fetch (ignorado):', err);
        });
        
        // Redirigir INMEDIATAMENTE a payment-processing
        window.location.href = '/payment-processing';
        
        // Prevenir la redirección automática del widget
        return false;
      },
      onReady: function () {
        const form = document.querySelector(
          "#widget-mount form.wpwl-form-card"
        );
        const payBtn = form?.querySelector(".wpwl-button-pay");

        // Agregar selector de Tipo de Crédito después del CVV
        if (form) {
          const tipoCreditoHtml =
            '<div class="wpwl-group wpwl-group-custom" style="margin-bottom: 15px;">' +
            '<div class="wpwl-label wpwl-label-custom">Tipo de pago</div>' +
            '<div class="wpwl-wrapper wpwl-wrapper-custom">' +
            '<select name="customParameters[SHOPPER_TIPOCREDITO]" class="wpwl-control wpwl-control-brand" style="width: 100%;">' +
            '<option value="00" selected>Corriente (Pago único)</option>' +
            "</select>" +
            "</div>" +
            "</div>";

          // Insertar después del wrapper de CVV
          const cvvWrapper = form.querySelector(".wpwl-wrapper-cvv");
          if (cvvWrapper && cvvWrapper.parentElement) {
            cvvWrapper.parentElement.insertAdjacentHTML(
              "afterend",
              tipoCreditoHtml
            );
            log(
              "Campo SHOPPER_TIPOCREDITO agregado visualmente (Corriente)",
              "ok"
            );
          }
        }

        if (isSubscription && form) {
          const submitBtn = form.querySelector(".wpwl-button-pay");
          const box = document.createElement("div");
          box.style.marginBottom = "20px";
          box.innerHTML = `
            <div class="wpwl-checkbox-registration">
              <label class="wpwl-label wpwl-label-registration" style="display:flex;align-items:center;gap:6px;cursor:pointer;font-size:14px">
                <input type="checkbox" class="wpwl-control wpwl-control-checkbox" value="true" checked
                 style="width:16px; height:16px; margin:0; vertical-align:middle;">
                <span>Guardar información de tarjeta para pagos futuros</span>
              </label>
            </div>`;
          submitBtn?.parentNode?.insertBefore(box, submitBtn);
        }

        payBtn?.insertAdjacentHTML(
          "afterend",
          '<div style="text-align:center;margin-top:8px;"><img src="https://www.datafast.com.ec/images/verified.png" style="max-width:180px;opacity:.9;" alt="Datafast Secure"/></div>'
        );
      },
    };

    if (isSubscription) {
      window.wpwlOptions.registrations = {
        requireCvv: true,
        hideInitialPaymentForms: false,
        useTokenOnly: false,
      };
    }
    const s = document.createElement("script");
    s.id = "oppwa-script";
    s.src = `${OPPWA}/v1/paymentWidgets.js?checkoutId=${checkoutId}`;
    s.async = true;
    s.onerror = () => log("Error cargando widget", "err");
    s.onload = () => {
      log("Widget cargado ✓", "ok");
      log(
        `Tipo de pago: ${isSubscription ? "Suscripción" : "Pago único"}`,
        "ok"
      );
      log(`Widget configurado para redirigir a: ${callbackUrl}`, "ok");
    };
    document.body.appendChild(s);
  }

  const btnCreate = document.getElementById("btn-create");
  if (btnCreate) {
    btnCreate.addEventListener("click", async () => {
      if (!validateForm()) return;

      log(`BACKEND URL: ${BACKEND}`);
      log(`OPPWA URL: ${OPPWA}`);

      const payForm = document.getElementById("pay-form");
      if (!payForm) {
        log("No se encontró el formulario", "err");
        return;
      }

      const fd = new FormData(payForm);
      const amount = String(fd.get("amount") || "1.00").trim();

      const selectedPlan = document.querySelector(
        'input[name="selectedPlan"]:checked'
      );
      if (!selectedPlan) {
        alert("Por favor selecciona un plan");
        return;
      }

      const planValue = selectedPlan.value;
      const isMonthlyPlan = planValue.includes("monthly");
      const isGymPlan = planValue.includes("gym");

      log(`Plan seleccionado: ${planValue}`);
      log(`Es plan mensual: ${isMonthlyPlan}`);
      log(`Es plan de gimnasio: ${isGymPlan}`);

      const middleNameValue = fd.get("middleName");
      const middleName =
        middleNameValue && String(middleNameValue).trim().length >= 2
          ? middleNameValue
          : "nd";

      const basePayload = {
        merchantTransactionId: String(fd.get("merchantTransactionId")),
        givenName: String(fd.get("givenName")),
        middleName: middleName || undefined,
        surname: String(fd.get("surname")),
        email: String(fd.get("email")),
        merchantCustomerId: String(fd.get("merchantCustomerId")),
        // Nuevos campos obligatorios DataFast Fase 2
        identificationDocType: String(fd.get("identificationDocType")),
        identificationDocId: String(fd.get("identificationDocId")),
        phone: String(fd.get("phone")),
        street1: String(fd.get("street1")),
        city: String(fd.get("city")),
        state: String(fd.get("state")),
        country: String(fd.get("country")),
        postcode: String(fd.get("postcode")),
        // Impuestos
        base0: String(fd.get("base0")),
        baseImp: String(fd.get("baseImp")),
        iva: String(fd.get("iva")),
        customerIp: "",
      };

      try {
        if (isMonthlyPlan) {
          log("Creando suscripción mensual...");

          let planType;
          if (planValue === "test-monthly") {
            planType = "TEST_MONTHLY";
          } else {
            planType = isGymPlan ? "GYM_MONTHLY" : "APP_MONTHLY";
          }

          // Generar returnUrl absoluta para el backend
          const returnUrl = `${window.location.origin}/payment-success`;

          const subscriptionPayload = {
            ...basePayload,
            planType,
            returnUrl,
          };

          log("Payload de suscripción:");
          log(subscriptionPayload);

          const data = await createSubscriptionCheckout(subscriptionPayload);
          log("Respuesta del servidor (suscripción):");
          log(data);

          if (!data?.id) {
            throw new Error("No se recibió checkoutId en la respuesta");
          }

          log(`CheckoutId recibido: ${data.id}`);

          const subscriptionData = {
            customerId: data.customerId,
            planType: data.planType,
          };

          sessionStorage.setItem(
            "subscriptionData",
            JSON.stringify(subscriptionData)
          );
          loadWidget(data.id, true, subscriptionData);
        } else {
          log("Creando pago único...");

          const oneTimePayload = {
            ...basePayload,
            amount,
            currency: "USD",
            paymentType: "DB",
          };

          log("Payload de pago único:");
          log(oneTimePayload);

          const data = await createCheckout(oneTimePayload);
          log("Respuesta del servidor (pago único):");
          log(data);

          if (!data?.id) {
            throw new Error("No se recibió checkoutId en la respuesta");
          }

          log(`CheckoutId recibido: ${data.id}`);
          loadWidget(data.id, false);
        }
      } catch (e) {
        let errorMessage = e instanceof Error ? e.message : String(e);
        log(`Error completo: ${errorMessage}`, "err");
        console.error("Error detallado:", e);

        try {
          // Intentar extraer el mensaje de error del texto de respuesta
          const errorText = errorMessage.startsWith("{")
            ? JSON.parse(errorMessage)
            : null;
          if (errorText && errorText.message) {
            errorMessage = errorText.message;
          }
        } catch (jsonError) {
          // Si no se puede parsear como JSON, usamos el mensaje original
        }

        // Verificar diferentes formatos posibles del error de ID duplicado
        if (
          errorMessage.includes("Unique constraint failed") ||
          errorMessage.includes("merchantCustomerId") ||
          (errorMessage === "Internal server error" &&
            e.toString().includes("merchantCustomerId"))
        ) {
          showNotification(
            "Ya existe un cliente registrado con este número de identificación. Por favor, utiliza otro número o contacta a soporte si crees que esto es un error.",
            "error"
          );
        } else {
          showNotification(
            "Error al procesar el pago. Por favor, verifica la información e intenta nuevamente.",
            "error"
          );
        }
      }
    });
  }
</script>
