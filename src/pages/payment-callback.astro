---
import Layout from "../layouts/Layout.astro";

// Obtener parámetros de la URL
const url = new URL(Astro.request.url);
const type = url.searchParams.get("type");
const checkoutId = url.searchParams.get("id");
const resourcePath = url.searchParams.get("resourcePath");
const customerId = url.searchParams.get("customerId");
const planType = url.searchParams.get("planType");

const BACKEND = import.meta.env.PUBLIC_BACKEND_URL || "http://localhost:3000";

let result: any = null;
let error: string | null = null;
let paymentData: any = null;

try {
  // Verificar que tenemos los parámetros requeridos
  if (!type || !checkoutId || !resourcePath) {
    throw new Error("Faltan parámetros requeridos en la URL");
  }

  // Llamar al endpoint del backend para procesar el callback
  let callbackUrl = `${BACKEND}/api/payments/payment-callback?type=${type}&id=${checkoutId}&resourcePath=${encodeURIComponent(resourcePath)}`;

  if (type === "subscription" && customerId && planType) {
    callbackUrl += `&customerId=${customerId}&planType=${planType}`;
  }

  const response = await fetch(callbackUrl);
  result = await response.json();

  if (!response.ok) {
    throw new Error(result.message || "Error al procesar el pago");
  }

  // Extraer datos del pago para mostrar
  paymentData = result.data?.paymentResult || result.data;
} catch (e) {
  console.error("Error en callback:", e);
  error = e instanceof Error ? e.message : "Error desconocido";
}

// Datos del plan según el tipo
function getPlanData(planType: any, type: any, paymentInfo: any) {
  if (type === 'subscription') {
    switch(planType) {
      case 'GYM_MONTHLY':
        return { name: 'Animus Flow - Plan Gimnasio', description: 'Acceso completo al gimnasio', price: '77.00', period: 'Mensual' };
      case 'APP_MONTHLY':
        return { name: 'Animus Flow - Plan App', description: 'Acceso a la aplicación móvil', price: '19.99', period: 'Mensual' };
      case 'TEST_MONTHLY':
        return { name: 'Plan de Prueba - Mensual', description: 'Plan de prueba para suscripción', price: '1.00', period: 'Mensual' };
      default:
        return { name: 'Plan Desconocido', description: '', price: '0.00', period: 'Mensual' };
    }
  } else {
    return { name: 'Pago Único', description: 'Pago único procesado', price: paymentInfo?.amount || '0.00', period: 'Único' };
  }
}

const planData = getPlanData(planType, type, paymentData);
---

<Layout
  title="Resultado del Pago - Animus Society"
  description="Resultado de tu transacción"
>
  <style>
    html,
    body {
      overflow: auto !important;
      height: auto !important;
    }
  </style>

  <div class="min-h-screen bg-gray-50 py-8 px-4 sm:px-6 lg:px-8">
    <div class="max-w-4xl mx-auto mb-4">
      <a
        href="/"
        class="inline-flex items-center justify-center w-10 h-10 text-gray-600 hover:text-gray-900 hover:bg-white rounded-full transition-all duration-200 shadow-sm border border-gray-200"
      >
        <svg
          class="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
        </svg>
      </a>
    </div>

    <div class="max-w-4xl mx-auto">
      {result && result.success ? (
        <!-- PAGO EXITOSO -->
        <>
          <!-- Header de confirmación -->
          <div class="text-center mb-8">
            <div class="inline-flex items-center justify-center w-16 h-16 bg-green-100 rounded-full mb-4">
              <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
            </div>
            <h1 class="text-3xl font-bold text-gray-900 mb-2">
              {result.type === "subscription" ? "¡Suscripción Activada!" : "¡Pago Exitoso!"}
            </h1>
            <p class="text-gray-600">
              {result.type === "subscription" 
                ? "Tu suscripción ha sido configurada y los pagos automáticos están activos"
                : "Tu pago ha sido procesado exitosamente"}
            </p>
          </div>

          <div class="grid lg:grid-cols-2 gap-8">
            <!-- Detalles de la Orden -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <h2 class="text-xl font-semibold text-gray-900 mb-6">Detalles de la Orden</h2>

              <div class="space-y-4">
                <!-- Plan/Producto -->
                <div class="border-b border-gray-200 pb-4">
                  <h3 class="font-medium text-gray-900 mb-2">
                    {result.type === "subscription" ? "Plan Adquirido" : "Producto"}
                  </h3>
                  <div class="flex justify-between items-start">
                    <div>
                      <p class="font-medium text-gray-900">{planData.name}</p>
                      <p class="text-sm text-gray-600">{planData.description}</p>
                      <p class="text-sm text-gray-600">Período: {planData.period}</p>
                      {result.type === "subscription" && (
                        <p class="text-sm text-green-600 font-medium mt-1">
                          ✅ Token de pago guardado para recurrencia
                        </p>
                      )}
                    </div>
                    <span class="text-lg font-semibold text-gray-900">${planData.price}</span>
                  </div>
                </div>

                <!-- IDs y Referencias -->
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <h4 class="text-sm font-medium text-gray-700 mb-1">ID de Orden</h4>
                    <p class="text-sm text-gray-900 font-mono bg-gray-50 p-2 rounded">
                      {paymentData?.merchantTransactionId || "N/A"}
                    </p>
                  </div>
                  <div>
                    <h4 class="text-sm font-medium text-gray-700 mb-1">Referencia</h4>
                    <p class="text-sm text-gray-900 font-mono bg-gray-50 p-2 rounded">
                      {paymentData?.resultDetails?.ReferenceNbr || checkoutId?.slice(-8) || "N/A"}
                    </p>
                  </div>
                </div>

                <!-- Fecha y Cliente -->
                <div>
                  <h4 class="text-sm font-medium text-gray-700 mb-1">Fecha de Procesamiento</h4>
                  <p class="text-sm text-gray-900">
                    {paymentData?.timestamp 
                      ? new Date(paymentData.timestamp).toLocaleString("es-ES", {
                          year: "numeric", month: "long", day: "numeric", 
                          hour: "2-digit", minute: "2-digit"
                        })
                      : new Date().toLocaleString("es-ES", {
                          year: "numeric", month: "long", day: "numeric", 
                          hour: "2-digit", minute: "2-digit"
                        })
                    }
                  </p>
                </div>

                {result.type === "subscription" && result.data?.subscription && (
                  <div>
                    <h4 class="text-sm font-medium text-gray-700 mb-1">Próximo Cobro</h4>
                    <p class="text-sm text-gray-900">
                      {new Date(result.data.subscription.nextBillingDate).toLocaleDateString("es-ES", {
                        year: "numeric", month: "long", day: "numeric"
                      })}
                    </p>
                  </div>
                )}
              </div>
            </div>

            <!-- Información de Pago -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
              <h2 class="text-xl font-semibold text-gray-900 mb-6">Información de Pago</h2>

              <div class="space-y-4">
                <!-- Estado del Pago -->
                <div class="flex items-center justify-between p-3 bg-green-50 rounded-lg border border-green-200">
                  <div class="flex items-center">
                    <svg class="w-5 h-5 text-green-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                    </svg>
                    <span class="text-sm font-medium text-green-800">
                      {paymentData?.resultDetails?.ExtendedDescription || paymentData?.result?.description || "Transacción Aprobada"}
                    </span>
                  </div>
                </div>

                <!-- Método de Pago -->
                {paymentData?.paymentBrand && (
                  <div>
                    <h4 class="text-sm font-medium text-gray-700 mb-2">Método de Pago</h4>
                    <div class="flex items-center p-3 bg-gray-50 rounded-lg">
                      <div class="flex items-center justify-center w-12 h-6 bg-white rounded border border-gray-200 text-blue-600 text-xs font-bold mr-3">
                        {paymentData.paymentBrand}
                      </div>
                      <div>
                        <p class="text-sm font-medium text-gray-900">
                          •••• •••• •••• {paymentData.card?.last4Digits || "****"}
                        </p>
                        {paymentData.card?.expiryMonth && (
                          <p class="text-xs text-gray-600">
                            Vence: {paymentData.card.expiryMonth}/{paymentData.card.expiryYear}
                          </p>
                        )}
                      </div>
                    </div>
                  </div>
                )}

                <!-- Desglose de Pago -->
                <div class="border-t border-gray-200 pt-4">
                  <h4 class="text-sm font-medium text-gray-700 mb-3">Desglose</h4>
                  <div class="space-y-2">
                    {paymentData?.customParameters && (
                      <>
                        <div class="flex justify-between text-sm">
                          <span class="text-gray-600">Subtotal</span>
                          <span class="text-gray-900">${paymentData.customParameters.SHOPPER_VAL_BASEIMP || "0.00"}</span>
                        </div>
                        <div class="flex justify-between text-sm">
                          <span class="text-gray-600">IVA</span>
                          <span class="text-gray-900">${paymentData.customParameters.SHOPPER_VAL_IVA || "0.00"}</span>
                        </div>
                        <div class="flex justify-between text-sm">
                          <span class="text-gray-600">Base 0%</span>
                          <span class="text-gray-900">${paymentData.customParameters.SHOPPER_VAL_BASE0 || "0.00"}</span>
                        </div>
                      </>
                    )}
                    <div class="border-t border-gray-200 pt-2 flex justify-between font-semibold">
                      <span class="text-gray-900">Total</span>
                      <span class="text-gray-900">
                        ${paymentData?.amount || planData.price} {paymentData?.currency || "USD"}
                      </span>
                    </div>
                  </div>
                </div>

                <!-- Detalles Técnicos -->
                {paymentData?.resultDetails && (
                  <div class="border-t border-gray-200 pt-4">
                    <h4 class="text-sm font-medium text-gray-700 mb-3">Detalles de la Transacción</h4>
                    <div class="space-y-2 text-xs">
                      {paymentData.resultDetails.AuthCode && (
                        <div class="flex justify-between">
                          <span class="text-gray-600">Código de Autorización</span>
                          <span class="text-gray-900 font-mono">{paymentData.resultDetails.AuthCode}</span>
                        </div>
                      )}
                      {paymentData.resultDetails.clearingInstituteName && (
                        <div class="flex justify-between">
                          <span class="text-gray-600">Procesador</span>
                          <span class="text-gray-900">{paymentData.resultDetails.clearingInstituteName}</span>
                        </div>
                      )}
                      {paymentData.result?.code && (
                        <div class="flex justify-between">
                          <span class="text-gray-600">Código de Resultado</span>
                          <span class="text-gray-900 font-mono">{paymentData.result.code}</span>
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </>
      ) : (
        <!-- PAGO FALLIDO -->
        <div class="text-center mb-8">
          <div class="inline-flex items-center justify-center w-16 h-16 bg-red-100 rounded-full mb-4">
            <svg class="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </div>
          <h1 class="text-3xl font-bold text-gray-900 mb-2">Error en el Pago</h1>
          <p class="text-gray-600 mb-8">
            {error || "Hubo un problema al procesar tu pago. Por favor, intenta nuevamente."}
          </p>

          <div class="max-w-md mx-auto bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <h3 class="text-lg font-medium text-gray-900 mb-4">¿Qué puedes hacer?</h3>
            <ul class="text-left text-sm text-gray-600 space-y-2 mb-6">
              <li>• Verificar que los datos de tu tarjeta sean correctos</li>
              <li>• Asegurarte de tener fondos suficientes</li>
              <li>• Intentar con otra tarjeta</li>
              <li>• Contactar a tu banco si el problema persiste</li>
            </ul>
            
            <div class="space-y-3">
              <a
                href="/pay"
                class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gray-900 hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
              >
                Intentar Nuevamente
              </a>
              <a
                href="/"
                class="w-full flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
              >
                Volver al Inicio
              </a>
            </div>
          </div>
        </div>
      )}

      <!-- Botones de Acción (solo para éxito) -->
      {result && result.success && (
        <div class="mt-8 flex flex-col sm:flex-row gap-4 justify-center">
          <a
            href="/"
            class="inline-flex items-center justify-center px-6 py-3 border border-gray-300 rounded-md shadow-sm text-base font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-900 transition-colors"
          >
            Volver al Inicio
          </a>
          <button
            onclick="window.print()"
            class="inline-flex items-center justify-center px-6 py-3 border border-transparent rounded-md shadow-sm text-base font-medium text-white bg-gray-900 hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-900 transition-colors"
          >
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z"></path>
            </svg>
            Imprimir Recibo
          </button>
        </div>
      )}

      <!-- Debug info en desarrollo -->
      {import.meta.env.DEV && (
        <div class="mt-8 max-w-2xl mx-auto">
          <details class="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
            <summary class="text-sm text-gray-500 cursor-pointer font-medium">
              Detalles técnicos (desarrollo)
            </summary>
            <pre class="text-xs bg-gray-100 p-4 rounded mt-4 overflow-auto">
{JSON.stringify({ type, checkoutId, resourcePath, customerId, planType, result, error, paymentData }, null, 2)}
            </pre>
          </details>
        </div>
      )}
    </div>
  </div>

  <style>
    @media print {
      .no-print {
        display: none !important;
      }
      body {
        background: white !important;
      }
      .bg-gray-50 {
        background: white !important;
      }
    }
  </style>
</Layout>
